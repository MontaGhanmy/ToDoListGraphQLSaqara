/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context as Context } from "./context"




declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  CommentInput: { // input type
    text: string; // String!
    todoId: string; // ID!
  }
  LoginInput: { // input type
    email: string; // String!
    password: string; // String!
  }
  SignUpInput: { // input type
    email: string; // String!
    name: string; // String!
    password: string; // String!
  }
  ToDoContentInput: { // input type
    content: string; // String!
    isDone: boolean; // Boolean!
  }
  ToDoShareInput: { // input type
    userId: string; // ID!
  }
  ToDoWhereUniqueInput: { // input type
    id: string; // ID!
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    accessToken: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Comment: { // root type
    id: string; // ID!
    text: string; // String!
    userId: string; // ID!
  }
  Mutation: {};
  Query: {};
  ToDo: { // root type
    comments?: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    content: string; // String!
    id: string; // ID!
    isDone: boolean; // Boolean!
    userId: string; // ID!
  }
  User: { // root type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    accessToken: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Comment: { // field return type
    id: string; // ID!
    text: string; // String!
    userId: string; // ID!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createToDo: NexusGenRootTypes['ToDo'] | null; // ToDo
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    logout: NexusGenRootTypes['User']; // User!
    refreshAuth: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    removeToDo: NexusGenRootTypes['ToDo'] | null; // ToDo
    shareToDo: NexusGenRootTypes['ToDo'] | null; // ToDo
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    updateToDo: NexusGenRootTypes['ToDo'] | null; // ToDo
  }
  Query: { // field return type
    todo: NexusGenRootTypes['ToDo'] | null; // ToDo
    todos: NexusGenRootTypes['ToDo'][]; // [ToDo!]!
  }
  ToDo: { // field return type
    comments: NexusGenRootTypes['Comment'][] | null; // [Comment!]
    content: string; // String!
    id: string; // ID!
    isDone: boolean; // Boolean!
    userId: string; // ID!
  }
  User: { // field return type
    email: string; // String!
    id: string; // ID!
    name: string; // String!
    password: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    accessToken: 'String'
    user: 'User'
  }
  Comment: { // field return type name
    id: 'ID'
    text: 'String'
    userId: 'ID'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createToDo: 'ToDo'
    login: 'AuthPayload'
    logout: 'User'
    refreshAuth: 'AuthPayload'
    removeToDo: 'ToDo'
    shareToDo: 'ToDo'
    signup: 'AuthPayload'
    updateToDo: 'ToDo'
  }
  Query: { // field return type name
    todo: 'ToDo'
    todos: 'ToDo'
  }
  ToDo: { // field return type name
    comments: 'Comment'
    content: 'String'
    id: 'ID'
    isDone: 'Boolean'
    userId: 'ID'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    password: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      input: NexusGenInputs['CommentInput']; // CommentInput!
      where: NexusGenInputs['ToDoWhereUniqueInput']; // ToDoWhereUniqueInput!
    }
    createToDo: { // args
      input: NexusGenInputs['ToDoContentInput']; // ToDoContentInput!
    }
    login: { // args
      input: NexusGenInputs['LoginInput']; // LoginInput!
    }
    removeToDo: { // args
      where: NexusGenInputs['ToDoWhereUniqueInput']; // ToDoWhereUniqueInput!
    }
    shareToDo: { // args
      input: NexusGenInputs['ToDoShareInput']; // ToDoShareInput!
      where: NexusGenInputs['ToDoWhereUniqueInput']; // ToDoWhereUniqueInput!
    }
    signup: { // args
      input: NexusGenInputs['SignUpInput']; // SignUpInput!
    }
    updateToDo: { // args
      input: NexusGenInputs['ToDoContentInput']; // ToDoContentInput!
      where: NexusGenInputs['ToDoWhereUniqueInput']; // ToDoWhereUniqueInput!
    }
  }
  Query: {
    todo: { // args
      where: NexusGenInputs['ToDoWhereUniqueInput']; // ToDoWhereUniqueInput!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}